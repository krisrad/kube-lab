AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX1"  : "ami-0080e4c5bc078760e"
      "AMALINUX2"  : "ami-0de53d8956e8dcf80"
      "UBUNTU1804" : "ami-0a313d6098716f372"
    us-west-1:
      "AMALINUX1" : "ami-0ec6517f6edbf8044"
      "AMALINUX2" : "ami-0a16c82eb0cc3aad8"
    ap-south-1:
      "AMALINUX1" : "ami-0ad42f4f66f6c1cc9"
      "AMALINUX2" : "ami-09243352e7fc54770"
Resources:
  ec2KubeMaster:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", UBUNTU1804]
      # InstanceType: t2.micro
      InstanceType: t2.small
      SubnetId: !ImportValue kubelab-basinfra-pubsubid
      KeyName: !ImportValue kubelab-basinfra-keypairid
      SecurityGroupIds:
        - !ImportValue kubelab-basinfra-secGroupBase
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            # install docker
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable"
            apt-get update
            apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu
            apt-mark hold docker-ce
            docker version
            # install kubelet, kubeadm, kubectl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
            deb https://apt.kubernetes.io/ kubernetes-xenial main
            EOF
            apt-get update
            apt-get install -y kubelet=1.12.7-00 kubeadm=1.12.7-00 kubectl=1.12.7-00
            apt-mark hold kubelet kubeadm kubectl
            kubeadm version
            # bootstrap kubernetes cluster
            kubeadm init --pod-network-cidr=10.244.0.0/16
            mkdir -p $HOME/.kube
            cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            chown $(id -u):$(id -g) $HOME/.kube/config
            kubectl version
            kubectl get nodes
            # configure networking with flannel
            echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
            # apply flannel config only on master
            kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml
            kubectl get pods -n kube-system
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "kube", "master"]]
  ec2KubeNode1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", UBUNTU1804]
      # InstanceType: t2.micro
      InstanceType: t2.small
      SubnetId: !ImportValue kubelab-basinfra-pubsubid
      KeyName: !ImportValue kubelab-basinfra-keypairid
      SecurityGroupIds:
        - !ImportValue kubelab-basinfra-secGroupBase
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            # install docker
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable"
            apt-get update
            apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu
            apt-mark hold docker-ce
            docker version
            # install kubelet, kubeadm, kubectl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
            deb https://apt.kubernetes.io/ kubernetes-xenial main
            EOF
            apt-get update
            apt-get install -y kubelet=1.12.7-00 kubeadm=1.12.7-00 kubectl=1.12.7-00
            apt-mark hold kubelet kubeadm kubectl
            kubeadm version
            # configure networking with flannel
            echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "kube", "node1"]]
  ec2KubeNode2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", UBUNTU1804]
      # InstanceType: t2.micro
      InstanceType: t2.small
      SubnetId: !ImportValue kubelab-basinfra-pubsubid
      KeyName: !ImportValue kubelab-basinfra-keypairid
      SecurityGroupIds:
        - !ImportValue kubelab-basinfra-secGroupBase
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            # install docker
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable"
            apt-get update
            apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu
            apt-mark hold docker-ce
            docker version
            # install kubelet, kubeadm, kubectl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
            deb https://apt.kubernetes.io/ kubernetes-xenial main
            EOF
            apt-get update
            apt-get install -y kubelet=1.12.7-00 kubeadm=1.12.7-00 kubectl=1.12.7-00
            apt-mark hold kubelet kubeadm kubectl
            kubeadm version
            # configure networking with flannel
            echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "kube", "node2"]]
Outputs:
  KubeMasterPubIp:
    Description: Kube Master Public IP
    Value: !GetAtt ec2KubeMaster.PublicIp
  KubeMasterPvtIp:
    Description: Kube Master Private IP
    Value: !GetAtt ec2KubeMaster.PrivateIp
  KubeNode1PubIp:
    Description: Kube Node1 Public IP
    Value: !GetAtt ec2KubeNode1.PublicIp
  KubeNode1PvtIp:
    Description: Kube Node1 Private IP
    Value: !GetAtt ec2KubeNode1.PrivateIp
  KubeNode2PubIp:
    Description: Kube Node2 Public IP
    Value: !GetAtt ec2KubeNode2.PublicIp
  KubeNode2PvtIp:
    Description: Kube Node2 Private IP
    Value: !GetAtt ec2KubeNode2.PrivateIp
